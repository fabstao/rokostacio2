package com.koalatechie.app;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;


@Path("/artista")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class ArtistaResource  {
	private Set<Artista> artistas = Collections.newSetFromMap(Collections.synchronizedMap(new LinkedHashMap<>()));
	private Stream lartistas;
	public ArtistaResource() {
		/*
		artistas.add(new Artista("ZIUR","Ismael Frausto",
				"ziurmx.oficial@gmail.com","Calle num",53200,"+525554047930",
				new Artista.Rider("Amplis, bataca","Senheiser y Shure","Catering")));
		artistas.add(new Artista("Codgo 80-20","Alex Mirabal",
				"codigo8020@gmail.com","Calle num",53100,"+525554047930",
				new Artista.Rider("Amplis, bataca","AKG y Shure","Catering"))); */
		lartistas = Artista.stream(query)
		//artistas = lartistas.stream().collect(null);
		artistas = Artista.streamAll().collect(Collectors.toSet());
	}
	@GET
    public Set<Artista> list() {
        return artistas;
    }

    @POST
    public Set<Artista> add(Artista artista) {
        artistas.add(artista);
        artista.persist();
        artista.update();
        return artistas;
    }

    @DELETE
    public Set<Artista> delete(Artista artista) {
        artistas.removeIf(existingArtista -> existingArtista.nombre.contentEquals(artista.nombre));
        return artistas;
    }

}

